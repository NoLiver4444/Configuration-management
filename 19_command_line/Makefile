# –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏ —Ñ–ª–∞–≥–∏
CXX = g++
CXXFLAGS = -Wall -Wextra -std=c++17 -pedantic-errors
LDFLAGS = 

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SRC_DIR = src
CORE_DIR = $(SRC_DIR)/core
UTILS_DIR = $(SRC_DIR)/utils
OBJ_DIR = obj
BIN_DIR = bin
CONFIG_DIR = config
SCRIPTS_DIR = scripts

# –¶–µ–ª–∏
TARGET = terminal

# –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
SRCS = $(SRC_DIR)/main.cpp \
       $(CORE_DIR)/commandline.cpp \
       $(CORE_DIR)/config.cpp \
       $(UTILS_DIR)/console.cpp

OBJS = $(SRCS:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)

.PHONY: all clean rebuild run test help install

# –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å
all: $(BIN_DIR)/$(TARGET)

# –°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
$(BIN_DIR)/$(TARGET): $(OBJS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $(OBJS) -o $@ $(LDFLAGS)
	@echo "\n\033[0;32m‚úÖ Terminal compiled successfully!\033[0m"
	@echo "üöÄ Run with: ./$(BIN_DIR)/$(TARGET)"

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
$(OBJ_DIR):
	mkdir -p $(OBJ_DIR) $(OBJ_DIR)/core $(OBJ_DIR)/utils

$(BIN_DIR):
	mkdir -p $(BIN_DIR)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
run: all
	@echo "\n\033[0;32müéØ Running terminal...\033[0m\n"
	./$(BIN_DIR)/$(TARGET)

# –ó–∞–ø—É—Å–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
test: all
	@echo "\n\033[0;32müß™ Testing with config...\033[0m\n"
	./$(BIN_DIR)/$(TARGET) --config $(CONFIG_DIR)/config.toml

# –ó–∞–ø—É—Å–∫ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
test-script: all
	@echo "\n\033[0;32müìú Testing with script...\033[0m\n"
	./$(BIN_DIR)/$(TARGET) --script $(SCRIPTS_DIR)/startup.txt

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
tree:
	@echo "\n\033[0;36müìÅ Project structure:\033[0m"
	@find . -type d -name "bin" -prune -o -type d -name "obj" -prune -o -type f -print | head -20
	@echo "..."

# –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
init:
	mkdir -p $(SRC_DIR)/core $(SRC_DIR)/utils $(OBJ_DIR) $(BIN_DIR) \
	         $(CONFIG_DIR) $(SCRIPTS_DIR) tests docs
	@echo "\n\033[0;32müìÅ Project structure created!\033[0m"

# –û—á–∏—Å—Ç–∫–∞
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)
	@echo "\n\033[0;32müßπ Clean completed!\033[0m"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
distclean: clean
	rm -f *.log *.tmp
	@echo "\n\033[0;32müßπ Deep clean completed!\033[0m"

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
rebuild: clean all

# –ü–æ–º–æ—â—å
help:
	@echo "\n\033[1;34müìã Available commands:\033[0m"
	@echo "  \033[0;32mmake all\033[0m        - Build terminal (default)"
	@echo "  \033[0;32mmake run\033[0m        - Build and run terminal"
	@echo "  \033[0;32mmake test\033[0m       - Test with config file"
	@echo "  \033[0;32mmake test-script\033[0m - Test with script"
	@echo "  \033[0;32mmake tree\033[0m       - Show project structure"
	@echo "  \033[0;32mmake init\033[0m       - Create project structure"
	@echo "  \033[0;32mmake clean\033[0m      - Clean build artifacts"
	@echo "  \033[0;32mmake distclean\033[0m  - Deep clean"
	@echo "  \033[0;32mmake rebuild\033[0m    - Clean and rebuild"
	@echo "  \033[0;32mmake help\033[0m       - Show this help"